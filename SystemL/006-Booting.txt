继续之前。。看一看booting过程和grub，准备一下理解bare bones里面的那段bootstrap assembly
http://wiki.osdev.org/Bootloader
http://wiki.osdev.org/Rolling_Your_Own_Bootloader


首先，是boot的顺序：
http://wiki.osdev.org/Boot_Sequence

机器开机或者reset (并非ctrl+alt+del）的时候，会做自检 = POST - Power-On Self-Test
自检以后就会寻找可以boot的磁盘，比如软盘，cd-rom，硬盘（根据bios的配置）

master boot record (MBR)
(legacy) bios检查可boot设备，搜素magic number，这个magic number (boot signature) 存在boot sector （第0扇区）的第510和511字节，值=0x55, 0xAA

当bios发现boot sector，他会把boot程序装载到内存的0x0000:0x7c00地址（segment=0, address=0x7c00），有些bios会装载到0x7c0:0x0000 （segment=0x07c0, offset=0），也许。。效果是一样的

接着，刚被装载的程序就开始执行了，在软盘上，整个512字节的boot record都可以是可执行的代码。而在硬盘上，mbr可执行代码的offset是0x0000 到 0x01bd，共446个字节，剩下的66个字节包含两部分：64个字节的主分区信息，主分区有四个，每个分区16字节；加上2个字节的校验。

每个partition table entry的16字节包含：
Element (offset)            Size            Description
0                           byte            Boot indicator bit flag: 0 = no, 0x80 = bootable (or "active")
1                           byte            Starting head
2                           6 bits          Starting sector (Bits 6-7 are the upper two bits for the Starting Cylinder field.)
3                           10 bits         Starting Cylinder
4                           byte            System ID
5                           byte            Ending Head
6                           6 bits          Ending Sector (Bits 6-7 are the upper two bits for the ending cylinder field)
7                           10 bits         Ending Cylinder
8                           uint32_t        Relative Sector (to start of partition -- also equals the partition's starting LBA value)
12                          uint32_t        Total Sectors in partition

这时候，cpu正处在实模式。有些很稀奇的bios，会很好心的帮你切换到保护模式，这使得你的boot程序不得不加上校验，检查保护模式是否已经打开。

最后，boot loader把操作系统内核装进内存，然后把控制权交给操作系统内核。

那么内核是如何被loading 进内存的呢？
If booting from hard drive, you have only 446 bytes available for your boot record. Looking at the list of things to do before your kernel image can run, you will agree that this is not much:
* determine which partition to boot from (either by looking for the active partition, or by presenting the user with a selection of installed operating systems to chose from);
* determine where your kernel image is located on the boot partition (either by interpreting the file system, or by loading the image from a fixed position);
* load the kernel image into memory (requires basic disk I/O);
* enable protected mode;
* preparing the runtime environment for the kernel (e.g. setting up stack space);

这些步骤不分顺序，不过他们都要被执行完，才能call kmain()

而且。。这个步骤是不能用c来写的。。。

再而且。。446字节的程序做到以上所有这一切，是有点困难的。。。有以下几种办法：
* Geek loading: Squeeze everything from the above list into the boot record. This is next to impossible, and does not leave room for any special-case handling or useful error messages.
* One-stage loading: Write a stub program for making the switch, and link that in front of your kernel image. Boot record loads kernel image (below the 1mb memory mark, because in real mode that's the upper memory limit!), jumps into the stub, stub makes the switch to Protected Mode and runtime preparations, jumps into kernel proper.
* Two-stage loading: Write a separate stub program which is loaded below the 1mb memory mark, and does everything from the above list.


传统的做法：
MBR会把自己relocate到地址：0x0000:0x0600，然后把active分区的第一扇区转载到0x0000:0x7c00，再jump到这个地址继续执行。这个步骤叫做"chain loading"。

简单的做法：
用现成的bootloader，比如GRUB = two-stage boot loader.